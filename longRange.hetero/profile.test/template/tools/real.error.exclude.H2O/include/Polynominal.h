#ifndef __wanghan_Polynominal_h__
#define __wanghan_Polynominal_h__

#include <vector>
#include <iostream>

typedef double value_type;
#define OneOverSix (.16666666666666666666)
#define OneOverTwo (.5)
#define _1o120 (.00833333333333333333)
#define _1o24  (.04166666666666666666)
#define _1o12  (.08333333333333333333)


struct InterpolationInfo 
{
public:
  typedef int Method;
  static Method ES;
  static Method Lagrange;
  static Method BSpline;
  static Method FBSpline;
  typedef unsigned Order;
  static Order Second;
  static Order Fourth;
  static Order Sixth;
  static Order Eighth;
  static Order Tenth;
  static Order Twelfth;
  static Order Fourteenth;
}
    ;

class unSmoothInterpolationBase
{
public:
  virtual ~unSmoothInterpolationBase () {};
  virtual unsigned getP () = 0;
  virtual inline void value (const double & input, double & output) = 0;
}
    ;

class Polynominalp1 : public unSmoothInterpolationBase
{
public :
  unsigned getP () {return 1;}
  inline void value (const double & input, double & output){
    switch (int(input+1)) {
    case 0:
	output = input + 1;
	break;
    case 1:
	output = -input + 1;
	break;
    default:
	std::cerr << "Polynominalp1: in a wrong domain\n" ;
    }
  }
};

class Polynominalp2 : public unSmoothInterpolationBase
{
public :
  unsigned getP () {return 2;}
  inline void value (const double & input, double & output){
    switch (int(input+2)){
    case 0:
	output = OneOverSix * (input+1) * (input+2) * (input+3);
	break;
    case 1:
	output =-OneOverTwo * (input-1) * (input+1) * (input+2);
	break;
    case 2:
	output = OneOverTwo * (input-2) * (input-1) * (input+1);
	break;
    case 3:
	output =-OneOverSix * (input-3) * (input-2) * (input-1);
	break;
//     case 4:
// 	if (input!=2){
// 	  std::cerr << "Polynominalp2: in a wrong domain\n" ;
// 	}
// 	else{
// 	  output = 0;}
// 	break;
    default:
	output = 0;
//	std::cerr << "Polynominalp2: in a wrong domain\n" ;
    }
  }
  inline void derivative (const double & x, double & output){
    switch (int(x+2)){
    case 0:
	output = (0.5 * x + 2) * x + 1.833333333333333;
	break;
    case 1:
	output = (-1.5 * x + -2) * x + 0.5;
	break;
    case 2:
	output = (1.5 * x + -2) * x + -0.5;
	break;
    case 3:
	output = (-0.5 * x + 2) * x + -1.833333333333333;
	break;
    default:
	output = 0;
    }
  }
}
    ;


class Polynominalp3 : public unSmoothInterpolationBase
{
public :
  unsigned getP () {return 3;}
  inline void value (const double & input, double & output){
    switch (int(input+3)){
    case 0:
	output = _1o120 * (input+1) * (input+2) * (input+3) * (input+4) * (input+5);
	break;
    case 1:
	output =-_1o24  * (input-1) * (input+1) * (input+2) * (input+3) * (input+4);
	break;
    case 2:
	output = _1o12  * (input-2) * (input-1) * (input+1) * (input+2) * (input+3);
	break;
    case 3:
	output =-_1o12  * (input-3) * (input-2) * (input-1) * (input+1) * (input+2);
	break;
    case 4:
	output = _1o24  * (input-4) * (input-3) * (input-2) * (input-1) * (input+1);
	break;
    case 5:
	output =-_1o120 * (input-5) * (input-4) * (input-3) * (input-2) * (input-1);
	break;
    default:
	output = 0;
//	std::cerr << "Polynominalp3: in a wrong domain\n" ;
    }
  }
  inline void derivative (const double & x, double & output) {
    switch (int(x+3)){
    case 0:
	output =(((0.04166666666666666 * x + 0.5) * x + 2.125) * x + 3.75) * x + 2.283333333333333 ;
	break;
    case 1:
	output =(((-0.2083333333333333 * x + -1.5) * x + -3.125) * x + -1.25) * x + 1.083333333333333;
	break;
    case 2:
	output =(((0.4166666666666666 * x + 1) * x + -1.25) * x + -2.5) * x + 0.3333333333333333 ;
	break;
    case 3:
	output =(((-0.4166666666666666 * x + 1) * x + 1.25) * x + -2.5) * x + -0.3333333333333333;
	break;
    case 4:
	output =(((0.2083333333333333 * x + -1.5) * x + 3.125) * x + -1.25) * x + -1.083333333333333 ;
	break;
    case 5:
	output =(((-0.04166666666666666 * x + 0.5) * x + -2.125) * x + 3.75) * x + -2.283333333333333;
	break;
    default:
	output = 0;
//	std::cerr << "Polynominalp3: in a wrong domain\n" ;
    }
  }

}

  ;

class smoothInterpolationBase
{
public:
  virtual ~smoothInterpolationBase() {};
  virtual unsigned getN () = 0;
  virtual void value (const double & u, double & output) = 0;
  virtual void derivative (const double & u, double & output) = 0;
}
    ;  

class BSpline2 : public smoothInterpolationBase 
{
public:
  ~BSpline2 () {};
  unsigned getN () {return 2;}
  inline void value (const double & u, double & output){
    switch (int(u)){
    case 0:
      output = u ;
      break;
    case 1:
      output = -u + 2;
      break;
    default:
      output = 0;
    }
  }
  inline void derivative (const double & u, double & output){
    switch (int(u)){
    case 0:
      output = 1;
      break;
    case 1:
      output = -1;
      break;
    default:
      output = 0;
    }
  }
}
  ;

class BSpline3 : public smoothInterpolationBase 
{
public:
  ~BSpline3 () {};
  unsigned getN () {return 3;}
  inline void value (const double & u, double & output){
    switch (int(u)){
    case 0:
      output = (0.5 * u ) * u ;
      break;
    case 1:
      output = (-u + 3) * u + -1.5;
      break;
    case 2:
      output = (0.5 * u + -3) * u + 4.5;
      break;
    default:
      output = 0;
    }
  }
  inline void derivative (const double & u, double & output){
    switch (int(u)){
    case 0:
      output = 1 * u + 0;
      break;
    case 1:
      output = -2 * u + 3;
      break;
    case 2:
      output = 1 * u + -3;
      break;
    default:
      output = 0;
    }
  }
}
  ;

class BSpline4 : public smoothInterpolationBase 
{
public :
  ~BSpline4 () {};
  unsigned getN () {return 4;}
  inline void value (const double & u, double & output){
    switch (int(u)){
    case 0:
      output = ((0.1666666666666667 * u ) * u ) * u ;
      break;
    case 1:
      output = ((-0.5 * u + 2) * u + -2) * u + 0.6666666666666666;
      break;
    case 2:
      output = ((0.5 * u + -4) * u + 10) * u + -7.333333333333333;
      break;
    case 3:
      output = ((-0.1666666666666667 * u + 2) * u + -8) * u + 10.66666666666667;
      break;
    default:
      output = 0;
    }
  }
  inline void derivative (const double & u, double & output){
    switch (int(u)){
    case 0:
      output = (0.5 * u + 0) * u + 0;
      break;
    case 1:
      output = (-1.5 * u + 4) * u + -2;
      break;
    case 2:
      output = (1.5 * u + -8) * u + 10;
      break;
    case 3:
      output = (-0.5 * u + 4) * u + -8;
      break;
    default:
      output = 0;
    }
  }
}
  ;

class BSpline5 : public smoothInterpolationBase 
{
public:
  ~BSpline5 () {};
  unsigned getN () {return 5;}
  inline void value (const double & u, double & output){
    switch (int(u)){
    case 0:
      output = (((0.04166666666666666 * u ) * u ) * u ) * u ;
      break;
    case 1:
      output = (((-0.1666666666666667 * u + 0.8333333333333333) * u + -1.25) * u + 0.8333333333333333) * u + -0.2083333333333333;
      break;
    case 2:
      output = (((0.25 * u + -2.5) * u + 8.75) * u + -12.5) * u + 6.458333333333332;
      break;
    case 3:
      output = (((-0.1666666666666667 * u + 2.5) * u + -13.75) * u + 32.5) * u + -27.29166666666666;
      break;
    case 4:
      output = (((0.04166666666666666 * u + -0.8333333333333333) * u + 6.25) * u + -20.83333333333333) * u + 26.04166666666666;
      break;
    default:
      output = 0;
    }
  }
  inline void derivative (const double & u, double & output){
    switch (int(u)){
    case 0:
      output = ((0.1666666666666667 * u + 0) * u + 0) * u + 0 ;
      break;
    case 1:
      output = ((-0.6666666666666666 * u + 2.5) * u + -2.5) * u + 0.8333333333333333;
      break;
    case 2:
      output = ((1 * u + -7.5) * u + 17.5) * u + -12.5;
      break;
    case 3:
      output = ((-0.6666666666666666 * u + 7.5) * u + -27.5) * u + 32.5;
      break;
    case 4:
      output = ((0.1666666666666667 * u + -2.5) * u + 12.5) * u + -20.83333333333333;
      break;
    default:
      output = 0;
    }
  }
}
  ;

class BSpline6 : public smoothInterpolationBase 
{
public:
  ~BSpline6 () {};
  unsigned getN () {return 6;}
  inline void value (const double & u, double & output){
    switch (int(u)){
    case 0:
      output = ((((0.008333333333333333 * u ) * u ) * u ) * u ) * u ;
      break;
    case 1:
      output = ((((-0.04166666666666666 * u + 0.25) * u + -0.5) * u + 0.5) * u + -0.25) * u + 0.05;
      break;
    case 2:
      output = ((((0.08333333333333334 * u + -1) * u + 4.5) * u + -9.5) * u + 9.75) * u + -3.95;
      break;
    case 3:
      output = ((((-0.08333333333333334 * u + 1.5) * u + -10.5) * u + 35.5) * u + -57.75) * u + 36.55;
      break;
    case 4:
      output = ((((0.04166666666666666 * u + -1) * u + 9.5) * u + -44.5) * u + 102.25) * u + -91.44999999999999;
      break;
    case 5:
      output = ((((-0.008333333333333333 * u + 0.25) * u + -3) * u + 18) * u + -53.99999999999999) * u + 64.8;
      break;
    default:
      output = 0;
//       std::cout << "go out of support " << u << "\t" << int(u) << std::endl;
//       std::cout << "go out of the support, set to 0" << std::endl;
//       std::cout << u << std::endl;
    }
  }

  inline void derivative (const double & u, double & output){
    switch (int(u)){
    case 0:
      output = (((0.04166666666666666 * u + 0) * u + 0) * u + 0) * u + 0;
      break;
    case 1:
      output = (((-0.2083333333333333 * u + 1) * u + -1.5) * u + 1) * u + -0.25;
      break;
    case 2:
      output = (((0.4166666666666667 * u + -4) * u + 13.5) * u + -19) * u + 9.75;
      break;
    case 3:
      output = (((-0.4166666666666667 * u + 6) * u + -31.5) * u + 71) * u + -57.75;
      break;
    case 4:
      output = (((0.2083333333333333 * u + -4) * u + 28.5) * u + -89) * u + 102.25;
      break;
    case 5:
      output = (((-0.04166666666666666 * u + 0.9999999999999999) * u + -9) * u + 36) * u + -53.99999999999999;
      break;
    default:
      output = 0;
    }
  } 
}
  ;


class BSpline8 : public smoothInterpolationBase 
{
public:
  ~BSpline8 () {};
  unsigned getN () {return 8;}
  inline void value (const double & u, double & output){
//     if ( u <= 0 ) { output = 0; return; }
    switch (int(u)){
    case 0:
	output = ((((((0.0001984126984126984 * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0;
	break;
    case 1:
	output = ((((((-0.001388888888888889 * u + 0.01111111111111111) * u + -0.03333333333333333) * u + 0.05555555555555555) * u + -0.05555555555555555) * u + 0.03333333333333333) * u + -0.01111111111111111) * u + 0.001587301587301587;
	break;
    case 2:
	output = ((((((0.004166666666666667 * u + -0.06666666666666665) * u + 0.4333333333333333) * u + -1.5) * u + 3.055555555555555) * u + -3.7) * u + 2.477777777777778) * u + -0.7095238095238096;
	break;
    case 3:
	output = ((((((-0.006944444444444444 * u + 0.1666666666666667) * u + -1.666666666666667) * u + 8.999999999999998) * u + -28.44444444444444) * u + 53) * u + -54.22222222222223) * u + 23.59047619047619;
	break;
    case 4:
	output = ((((((0.006944444444444444 * u + -0.2222222222222222) * u + 3) * u + -22.11111111111111) * u + 96) * u + -245.6666666666667) * u + 344.0000000000001) * u + -203.9650793650794;
	break;
    case 5:
	output = ((((((-0.004166666666666667 * u + 0.1666666666666666) * u + -2.833333333333333) * u + 26.5) * u + -147.0555555555555) * u + 483.4999999999999) * u + -871.2777777777776) * u + 664.0904761904764;
	break;
    case 6:
	output = ((((((0.001388888888888889 * u + -0.06666666666666665) * u + 1.366666666666666) * u + -15.5) * u + 104.9444444444444) * u + -423.6999999999999) * u + 943.122222222222) * u + -891.1095238095236;
	break;
    case 7:
	output = ((((((-0.0001984126984126984 * u + 0.01111111111111111) * u + -0.2666666666666666) * u + 3.555555555555555) * u + -28.44444444444444) * u + 136.5333333333333) * u + -364.0888888888888) * u + 416.1015873015872;
	break;
    default:
	output = 0;
    }
  } 
  
  inline void derivative (const double & u, double & output){
    switch (int(u)){
    case 0:
	output = (((((0.001388888888888889 * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0;
	break;
    case 1:
	output = (((((-0.009722222222222221 * u + 0.06666666666666665) * u + -0.1666666666666666) * u + 0.2222222222222222) * u + -0.1666666666666667) * u + 0.06666666666666667) * u + -0.01111111111111111;
	break;
    case 2:
	output = (((((0.02916666666666667 * u + -0.3999999999999999) * u + 2.166666666666667) * u + -6) * u + 9.166666666666666) * u + -7.399999999999999) * u + 2.477777777777778;
	break;
    case 3:
	output = (((((-0.0486111111111111 * u + 1) * u + -8.333333333333332) * u + 35.99999999999999) * u + -85.33333333333333) * u + 106) * u + -54.22222222222223;
	break;
    case 4:
	output = (((((0.0486111111111111 * u + -1.333333333333333) * u + 15) * u + -88.44444444444444) * u + 288) * u + -491.3333333333334) * u + 344.0000000000001;
	break;
    case 5: 
	output = (((((-0.02916666666666667 * u + 0.9999999999999998) * u + -14.16666666666666) * u + 106) * u + -441.1666666666666) * u + 966.9999999999999) * u + -871.2777777777776;
	break;
    case 6:
	output = (((((0.009722222222222221 * u + -0.3999999999999999) * u + 6.833333333333332) * u + -61.99999999999999) * u + 314.8333333333333) * u + -847.3999999999999) * u + 943.122222222222;
	break;
    case 7:
	output = (((((-0.001388888888888889 * u + 0.06666666666666665) * u + -1.333333333333333) * u + 14.22222222222222) * u + -85.33333333333331) * u + 273.0666666666666) * u + -364.0888888888888;
	break;
    default:
	output = 0;
    }
  } 
}
    ;



class BSpline10 : public smoothInterpolationBase 
{
public:
  ~BSpline10 () {};
  unsigned getN () {return 10;}
  inline void value (const double & u, double & output){
    switch (int(u)){
    case 0:
	output = ((((((((2.755731922398588e-06 * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0;
	break;
    case 1:
	output = ((((((((-2.480158730158729e-05 * u + 0.0002480158730158729) * u + -0.0009920634920634918) * u + 0.002314814814814814) * u + -0.003472222222222222) * u + 0.003472222222222221) * u + -0.002314814814814815) * u + 0.000992063492063492) * u + -0.000248015873015873) * u + 2.755731922398589e-05;
	break;
    case 2:
	output = ((((((((9.920634920634918e-05 * u + -0.001984126984126984) * u + 0.01686507936507936) * u + -0.08101851851851852) * u + 0.2465277777777777) * u + -0.4965277777777777) * u + 0.6643518518518517) * u + -0.5704365079365078) * u + 0.2854662698412698) * u + -0.0634645061728395;
	break;
    case 3:
	output = ((((((((-0.0002314814814814814 * u + 0.006944444444444444) * u + -0.09027777777777776) * u + 0.6689814814814814) * u + -3.128472222222222) * u + 9.628472222222221) * u + -19.58564814814815) * u + 25.46527777777778) * u + -19.24131944444445) * u + 6.445464065255731;
	break;
    case 4:
	output = ((((((((0.0003472222222222222 * u + -0.01388888888888889) * u + 0.2430555555555555) * u + -2.44212962962963) * u + 15.53819444444444) * u + -65.03819444444444) * u + 179.525462962963) * u + -315.8680555555555) * u + 322.0920138888889) * u + -145.258239638448;
	break;
    case 5:
	output = ((((((((-0.0003472222222222222 * u + 0.01736111111111111) * u + -0.3819444444444444) * u + 4.849537037037037) * u + -39.14930555555555) * u + 208.3993055555555) * u + -731.9328703703702) * u + 1637.256944444444) * u + -2119.314236111111) * u + 1211.078565917107;
	break;
    case 6:
	output = ((((((((0.0002314814814814814 * u + -0.01388888888888889) * u + 0.3680555555555555) * u + -5.650462962962963) * u + 55.35069444444444) * u + -358.6006944444444) * u + 1536.06712962963) * u + -4194.743055555556) * u + 6628.685763888889) * u + -4620.921434082893;
	break;
    case 7:
	output = ((((((((-9.920634920634918e-05 * u + 0.006944444444444442) * u + -0.2152777777777777) * u + 3.877314814814814) * u + -44.69097222222221) * u + 341.6909722222222) * u + -1731.960648148148) * u + 5609.340277777777) * u + -10528.46006944444) * u + 8723.525325176366;
	break;
    case 8:
	output = ((((((((2.480158730158729e-05 * u + -0.001984126984126984) * u + 0.07043650793650791) * u + -1.456018518518518) * u + 19.30902777777778) * u + -170.3090277777777) * u + 998.7060185185184) * u + -3752.945436507936) * u + 8196.111359126982) * u + -7920.538166887124;
	break;
    case 9:
	output = ((((((((-2.755731922398588e-06 * u + 0.000248015873015873) * u + -0.009920634920634917) * u + 0.2314814814814815) * u + -3.472222222222222) * u + 34.72222222222221) * u + -231.4814814814814) * u + 992.0634920634919) * u + -2480.158730158731) * u + 2755.731922398589;
	break;
    default:
	output = 0;
    }
  } 
  
  inline void derivative (const double & u, double & output){
    switch (int(u)){
    case 0:
	output = (((((((2.480158730158729e-05 * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0;
	break;
    case 1:
	output = (((((((-0.0002232142857142857 * u + 0.001984126984126984) * u + -0.006944444444444442) * u + 0.01388888888888888) * u + -0.01736111111111111) * u + 0.01388888888888888) * u + -0.006944444444444444) * u + 0.001984126984126984) * u + -0.000248015873015873;
	break;
    case 2:
	output = (((((((0.0008928571428571426 * u + -0.01587301587301587) * u + 0.1180555555555555) * u + -0.4861111111111111) * u + 1.232638888888889) * u + -1.986111111111111) * u + 1.993055555555555) * u + -1.140873015873016) * u + 0.2854662698412698;
	break;
    case 3:
	output = (((((((-0.002083333333333333 * u + 0.05555555555555555) * u + -0.6319444444444443) * u + 4.013888888888888) * u + -15.64236111111111) * u + 38.51388888888889) * u + -58.75694444444444) * u + 50.93055555555556) * u + -19.24131944444445;
	break;
    case 4:
	output = (((((((0.003125 * u + -0.1111111111111111) * u + 1.701388888888889) * u + -14.65277777777778) * u + 77.69097222222221) * u + -260.1527777777778) * u + 538.5763888888889) * u + -631.7361111111111) * u + 322.0920138888889;
	break;
    case 5:
	output = (((((((-0.003125 * u + 0.1388888888888889) * u + -2.673611111111111) * u + 29.09722222222222) * u + -195.7465277777777) * u + 833.5972222222222) * u + -2195.79861111111) * u + 3274.513888888889) * u + -2119.314236111111;
	break;
    case 6:
	output = (((((((0.002083333333333333 * u + -0.1111111111111111) * u + 2.576388888888889) * u + -33.90277777777778) * u + 276.7534722222222) * u + -1434.402777777778) * u + 4608.20138888889) * u + -8389.486111111111) * u + 6628.685763888889;
	break;
    case 7:
	output = (((((((-0.0008928571428571426 * u + 0.05555555555555554) * u + -1.506944444444444) * u + 23.26388888888889) * u + -223.4548611111111) * u + 1366.763888888889) * u + -5195.881944444443) * u + 11218.68055555555) * u + -10528.46006944444;
	break;
    case 8:
	output = (((((((0.0002232142857142857 * u + -0.01587301587301587) * u + 0.4930555555555554) * u + -8.736111111111109) * u + 96.54513888888887) * u + -681.2361111111109) * u + 2996.118055555555) * u + -7505.890873015872) * u + 8196.111359126982;
	break;
    case 9:
	output = (((((((-2.480158730158729e-05 * u + 0.001984126984126984) * u + -0.06944444444444442) * u + 1.388888888888889) * u + -17.36111111111111) * u + 138.8888888888889) * u + -694.4444444444443) * u + 1984.126984126984) * u + -2480.158730158731;
	break;
    default:
	output = 0;
    }
  } 
}
    ;





class BSpline12 : public smoothInterpolationBase 
{
public:
  ~BSpline12 () {};
  unsigned getN () {return 12;}
  inline void value (const double & u, double & output){
    switch (int(u)){
    case 0:
	output = ((((((((((2.505210838544171e-08 * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0;
	break;
    case 1:
	output = ((((((((((-2.755731922398588e-07 * u + 3.306878306878306e-06) * u + -1.653439153439153e-05) * u + 4.960317460317459e-05) * u + -9.920634920634921e-05) * u + 0.0001388888888888889) * u + -0.0001388888888888889) * u + 9.920634920634918e-05) * u + -4.960317460317458e-05) * u + 1.653439153439153e-05) * u + -3.306878306878306e-06) * u + 3.006253006253005e-07;
	break;
    case 2:
	output = ((((((((((1.377865961199294e-06 * u + -3.306878306878306e-05) * u + 0.0003472222222222221) * u + -0.002132936507936508) * u + 0.008630952380952378) * u + -0.02430555555555555) * u + 0.04874999999999999) * u + -0.06974206349206348) * u + 0.06979166666666665) * u + -0.04654431216931217) * u + 0.01862103174603174) * u + -0.00338594276094276;
	break;
    case 3:
	output = ((((((((((-4.133597883597883e-06 * u + 0.0001488095238095238) * u + -0.00238095238095238) * u + 0.02242063492063492) * u + -0.1386904761904762) * u + 0.5944444444444443) * u + -1.8075) * u + 3.907936507936507) * u + -5.896726190476189) * u + 5.919973544973544) * u + -3.561289682539682) * u + 0.9729533429533428;
	break;
    case 4:
	output = ((((((((((8.267195767195766e-06 * u + -0.0003968253968253968) * u + 0.008531746031746031) * u + -0.108531746031746) * u + 0.9089285714285713) * u + -5.272222222222222) * u + 21.65916666666666) * u + -63.13968253968253) * u + 128.1985119047619) * u + -172.8736772486772) * u + 139.4736309523809) * u + -51.03974506974506;
	break;
    case 5:
	output = ((((((((((-1.157407407407407e-05 * u + 0.0006944444444444445) * u + -0.01875) * u + 0.3006944444444444) * u + -3.183333333333334) * u + 23.37361111111111) * u + -121.57) * u + 448.3930555555556) * u + -1150.633333333333) * u + 1958.512731481481) * u + -1991.912777777778) * u + 917.7722588985088;
	break;
    case 6:
	output = ((((((((((1.157407407407407e-05 * u + -0.0008333333333333333) * u + 0.02708333333333333) * u + -0.5243055555555556) * u + 6.716666666666667) * u + -59.78638888888888) * u + 377.3899999999999) * u + -1690.006944444445) * u + 5264.566666666666) * u + -10871.88726851852) * u + 13404.56722222222) * u + -7480.307741101491;
	break;
    case 7:
	output = ((((((((((-8.267195767195766e-06 * u + 0.0006944444444444444) * u + -0.02638888888888889) * u + 0.5986111111111111) * u + -9.004166666666668) * u + 94.27777777777779) * u + -701.0591666666667) * u + 3702.238888888889) * u + -13608.29375) * u + 33164.78703703704) * u + -48246.77680555554) * u + 31752.36573112073;
	break;
    case 8:
	output = ((((((((((4.133597883597883e-06 * u + -0.0003968253968253968) * u + 0.01726190476190476) * u + -0.4490079365079365) * u + 7.757738095238095) * u + -93.45555555555555) * u + 800.8074999999999) * u + -4879.856349206349) * u + 20720.08720238095) * u + -58377.56216931216) * u + 98220.98192460318) * u + -74769.64061808561;
	break;
    case 9:
	output = ((((((((((-1.377865961199294e-06 * u + 0.0001488095238095238) * u + -0.007291666666666665) * u + 0.213938492063492) * u + -4.175297619047618) * u + 56.90069444444444) * u + -552.3987499999998) * u + 3819.326686507935) * u + -18426.23645833333) * u + 59061.40881283068) * u + -113169.165843254) * u + 98185.93482834296;
	break;
    case 10:
	output = ((((((((((2.755731922398588e-07 * u + -3.306878306878307e-05) * u + 0.001802248677248677) * u + -0.05887896825396823) * u + 1.281051587301587) * u + -19.48819444444444) * u + 211.4901388888889) * u + -1637.022519841269) * u + 8855.509573412695) * u + -31877.74462632275) * u + 68709.14103505289) * u + -67157.98051557236;
	break;
    case 11:
	output = ((((((((((-2.505210838544171e-08 * u + 3.306878306878307e-06) * u + -0.0001984126984126984) * u + 0.007142857142857142) * u + -0.1714285714285714) * u + 2.88) * u + -34.56) * u + 296.2285714285714) * u + -1777.371428571429) * u + 7109.485714285714) * u + -17062.76571428571) * u + 18613.92623376624;
	break;
    default:
	output = 0;
    }
  } 
  
  inline void derivative (const double & u, double & output){
    switch (int(u)){
    case 0:
	output = (((((((((2.755731922398588e-07 * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0;
	break;
    case 1:
	output = (((((((((-3.031305114638447e-06 * u + 3.306878306878306e-05) * u + -0.0001488095238095238) * u + 0.0003968253968253967) * u + -0.0006944444444444445) * u + 0.0008333333333333332) * u + -0.0006944444444444444) * u + 0.0003968253968253967) * u + -0.0001488095238095237) * u + 3.306878306878306e-05) * u + -3.306878306878306e-06;
	break;
    case 2:
	output = (((((((((1.515652557319224e-05 * u + -0.0003306878306878306) * u + 0.003124999999999999) * u + -0.01706349206349206) * u + 0.06041666666666665) * u + -0.1458333333333333) * u + 0.2437499999999999) * u + -0.2789682539682539) * u + 0.209375) * u + -0.09308862433862433) * u + 0.01862103174603174;
	break;
    case 3:
	output = (((((((((-4.546957671957671e-05 * u + 0.001488095238095238) * u + -0.02142857142857142) * u + 0.1793650793650793) * u + -0.9708333333333334) * u + 3.566666666666666) * u + -9.037499999999998) * u + 15.63174603174603) * u + -17.69017857142857) * u + 11.83994708994709) * u + -3.561289682539682;
	break;
    case 4:
	output = (((((((((9.093915343915342e-05 * u + -0.003968253968253968) * u + 0.07678571428571428) * u + -0.8682539682539682) * u + 6.362499999999999) * u + -31.63333333333333) * u + 108.2958333333333) * u + -252.5587301587301) * u + 384.5955357142857) * u + -345.7473544973544) * u + 139.4736309523809;
	break;
    case 5:
	output = (((((((((-0.0001273148148148148 * u + 0.006944444444444445) * u + -0.16875) * u + 2.405555555555555) * u + -22.28333333333333) * u + 140.2416666666667) * u + -607.8499999999999) * u + 1793.572222222223) * u + -3451.9) * u + 3917.025462962963) * u + -1991.912777777778;
	break;
    case 6:
	output = (((((((((0.0001273148148148148 * u + -0.008333333333333333) * u + 0.2437499999999999) * u + -4.194444444444445) * u + 47.01666666666667) * u + -358.7183333333332) * u + 1886.95) * u + -6760.027777777778) * u + 15793.7) * u + -21743.77453703704) * u + 13404.56722222222;
	break;
    case 7:
	output = (((((((((-9.093915343915342e-05 * u + 0.006944444444444444) * u + -0.2375) * u + 4.788888888888889) * u + -63.02916666666668) * u + 565.6666666666667) * u + -3505.295833333334) * u + 14808.95555555555) * u + -40824.88125000001) * u + 66329.57407407407) * u + -48246.77680555554;
	break;
    case 8:
	output = (((((((((4.546957671957671e-05 * u + -0.003968253968253968) * u + 0.1553571428571428) * u + -3.592063492063492) * u + 54.30416666666666) * u + -560.7333333333333) * u + 4004.037499999999) * u + -19519.4253968254) * u + 62160.26160714286) * u + -116755.1243386243) * u + 98220.98192460318;
	break;
    case 9:
	output = (((((((((-1.515652557319224e-05 * u + 0.001488095238095238) * u + -0.06562499999999999) * u + 1.711507936507936) * u + -29.22708333333333) * u + 341.4041666666666) * u + -2761.993749999999) * u + 15277.30674603174) * u + -55278.709375) * u + 118122.8176256614) * u + -113169.165843254;
	break;
    case 10:
	output = (((((((((3.031305114638447e-06 * u + -0.0003306878306878307) * u + 0.01622023809523809) * u + -0.4710317460317459) * u + 8.96736111111111) * u + -116.9291666666666) * u + 1057.450694444444) * u + -6548.090079365077) * u + 26566.52872023809) * u + -63755.48925264549) * u + 68709.14103505289;
	break;
    case 11:
	output = (((((((((-2.755731922398588e-07 * u + 3.306878306878307e-05) * u + -0.001785714285714285) * u + 0.05714285714285713) * u + -1.2) * u + 17.28) * u + -172.8) * u + 1184.914285714286) * u + -5332.114285714286) * u + 14218.97142857143) * u + -17062.76571428571;
	break;
    default:
	output = 0;
    }
  } 
}
    ;


class BSpline14 : public smoothInterpolationBase 
{
public:
  ~BSpline14 () {};
  unsigned getN () {return 14;}
  inline void value (const double & u, double & output){
    switch (int(u)){
    case 0:
	output = ((((((((((((1.605904383682161e-10 * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0;
	break;
    case 1:
	output = ((((((((((((-2.087675698786809e-09 * u + 2.922745978301533e-08) * u + -1.75364758698092e-07) * u + 6.430041152263373e-07) * u + -1.607510288065843e-06) * u + 2.893518518518518e-06) * u + -3.858024691358024e-06) * u + 3.858024691358023e-06) * u + -2.893518518518518e-06) * u + 1.607510288065843e-06) * u + -6.430041152263373e-07) * u + 1.75364758698092e-07) * u + -2.922745978301533e-08) * u + 2.248266137155025e-09;
	break;
    case 2:
	output = ((((((((((((1.252605419272086e-08 * u + -3.50729517396184e-07) * u + 4.384118967452299e-06) * u + -3.27932098765432e-05) * u + 0.0001655735596707819) * u + -0.0005989583333333333) * u + 0.00160108024691358) * u + -0.003206018518518518) * u + 0.004811921296296295) * u + -0.005348186728395061) * u + 0.004279192386831274) * u + -0.002334280303030303) * u + 0.0007781226618032172) * u + -0.0001197134270050936;
	break;
    case 3:
	output = ((((((((((((-4.592886537330981e-08 * u + 1.929012345679012e-06) * u + -3.665123456790122e-05) * u + 0.0004185956790123456) * u + -0.003219843106995884) * u + 0.01768229166666666) * u + -0.0715239197530864) * u + 0.2161689814814814) * u + -0.4887818287037036) * u + 0.8173080632716048) * u + -0.9829083076131685) * u + 0.8053645833333329) * u + -0.4030713091563785) * u + 0.0930763093002676;
	break;
    case 4:
	output = ((((((((((((1.148221634332745e-07 * u + -6.430041152263374e-06) * u + 0.000163966049382716) * u + -0.002523791152263374) * u + 0.02620402520576131) * u + -0.1941695601851852) * u + 1.05835262345679) * u + -4.303337191358024) * u + 13.06973668981481) * u + -29.31273308899177) * u + 47.22515753600822) * u + -51.78525270061727) * u + 34.65734021347735) * u + -10.69474262074088;
	break;
    case 5:
	output = ((((((((((((-2.066798941798942e-07 * u + 1.446759259259259e-05) * u + -0.0004629629629629629) * u + 0.008969907407407406) * u + -0.1174672067901234) * u + 1.098871527777777) * u + -7.561921296296296) * u + 38.7980324074074) * u + -148.5603993055555) * u + 419.659866898148) * u + -850.7200424382714) * u + 1172.685474537037) * u + -985.7349324845676) * u + 381.7638238015842;
	break;
    case 6:
	output = ((((((((((((2.755731922398589e-07 * u + -2.314814814814814e-05) * u + 0.0008912037037037037) * u + -0.02082175925925926) * u + 0.3294077932098765) * u + -3.727378472222222) * u + 31.0480787037037) * u + -192.8619675925926) * u + 893.9096006944444) * u + -3055.240133101851) * u + 7489.039957561728) * u + -12474.19452546296) * u + 12661.14506751543) * u + -5916.796176198414;
	break;
    case 7:
	output = ((((((((((((-2.755731922398589e-07 * u + 2.700617283950617e-05) * u + -0.001215277777777778) * u + 0.0332445987654321) * u + -0.6167534722222222) * u + 8.194253472222222) * u + -80.22048611111111) * u + 586.017986111111) * u + -3195.210156249999) * u + 12846.89225501543) * u + -37036.93072916666) * u + 72529.9313310185) * u + -86510.33509837961) * u + 47483.23160543737;
	break;
    case 8:
	output = ((((((((((((2.066798941798942e-07 * u + -2.314814814814814e-05) * u + 0.001192129629629629) * u + -0.03737268518518518) * u + 0.7955922067901235) * u + -12.14352430555556) * u + 136.7158101851852) * u + -1149.472384259259) * u + 7217.732065972221) * u + -33432.8509548611) * u + 111058.2475424383) * u + -250586.821261574) * u + 344312.0016917437) * u + -217638.2064192539;
	break;
    case 9:
	output = ((((((((((((-1.148221634332745e-07 * u + 1.446759259259259e-05) * u + -0.0008391203703703703) * u + 0.02965856481481481) * u + -0.7126109182098764) * u + 12.28936631944445) * u + -156.4788773148148) * u + 1489.279803240741) * u + -10593.84519965278) * u + 55625.03537326391) * u + -209550.1432388118) * u + 536361.0470196758) * u + -836109.8007301311) * u + 599576.8875651211;
	break;
    case 10:
	output = ((((((((((((4.592886537330981e-08 * u + -6.430041152263373e-06) * u + 0.0004147376543209876) * u + -0.01631622942386831) * u + 0.4367589377572016) * u + -8.399291087962961) * u + 119.3698881172839) * u + -1269.207851080247) * u + 10094.81220775463) * u + -59311.95022344391) * u + 250197.7991480195) * u + -717496.9776716819) * u + 1253653.573755465) * u + -1007933.400500722;
	break;
    case 11:
	output = ((((((((((((-1.252605419272086e-08 * u + 1.929012345679012e-06) * u + -0.0001369598765432098) * u + 0.005935570987654319) * u + -0.1751655735596707) * u + 3.716814236111111) * u + -58.33298996913579) * u + 685.5238078703702) * u + -6031.723978587961) * u + 39239.10424864968) * u + -183426.8405291924) * u + 583376.9413599535) * u + -1131281.9444692) * u + 1010088.961073995;
	break;
    case 12:
	output = ((((((((((((2.087675698786809e-09 * u + -3.507295173961841e-07) * u + 2.718153759820426e-05) * u + -0.001286651234567901) * u + 0.04150109310699587) * u + -0.9631857638888885) * u + 16.54701003086419) * u + -213.0361921296296) * u + 2055.316021412036) * u + -14674.4957513503) * u + 75358.43947080759) * u + -263556.7022764099) * u + 562585.3428035271) * u + -553480.8425623688;
	break;
    case 13:
	output = ((((((((((((-1.605904383682161e-10 * u + 2.922745978301534e-08) * u + -2.455106621773288e-06) * u + 0.0001260288065843621) * u + -0.004411008230452674) * u + 0.1111574074074074) * u + -2.074938271604938) * u + 29.04913580246913) * u + -305.0159259259259) * u + 2372.34609053498) * u + -13285.13810699588) * u + 50725.0727721661) * u + -118358.5031350543) * u + 127463.0033762123;
	break;
    default:
	output = 0;
    }
  } 
  
  inline void derivative (const double & u, double & output){
    switch (int(u)){
    case 0:
	output = (((((((((((2.087675698786809e-09 * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0) * u + 0;
	break;
    case 1:
	output = (((((((((((-2.713978408422852e-08 * u + 3.50729517396184e-07) * u + -1.929012345679012e-06) * u + 6.430041152263373e-06) * u + -1.446759259259259e-05) * u + 2.314814814814814e-05) * u + -2.700617283950617e-05) * u + 2.314814814814814e-05) * u + -1.446759259259259e-05) * u + 6.430041152263373e-06) * u + -1.929012345679012e-06) * u + 3.50729517396184e-07) * u + -2.922745978301533e-08;
	break;
    case 2:
	output = (((((((((((1.628387045053711e-07 * u + -4.208754208754208e-06) * u + 4.822530864197529e-05) * u + -0.000327932098765432) * u + 0.001490162037037037) * u + -0.004791666666666666) * u + 0.01120756172839506) * u + -0.01923611111111111) * u + 0.02405960648148148) * u + -0.02139274691358024) * u + 0.01283757716049382) * u + -0.004668560606060606) * u + 0.0007781226618032172;
	break;
    case 3:
	output = (((((((((((-5.970752498530275e-07 * u + 2.314814814814814e-05) * u + -0.0004031635802469135) * u + 0.004185956790123456) * u + -0.02897858796296296) * u + 0.1414583333333333) * u + -0.5006674382716049) * u + 1.297013888888889) * u + -2.443909143518518) * u + 3.269232253086419) * u + -2.948724922839506) * u + 1.610729166666666) * u + -0.4030713091563785;
	break;
    case 4:
	output = (((((((((((1.492688124632569e-06 * u + -7.716049382716048e-05) * u + 0.001803626543209876) * u + -0.02523791152263374) * u + 0.2358362268518518) * u + -1.553356481481481) * u + 7.40846836419753) * u + -25.82002314814814) * u + 65.34868344907406) * u + -117.2509323559671) * u + 141.6754726080246) * u + -103.5705054012345) * u + 34.65734021347735;
	break;
    case 5:
	output = (((((((((((-2.686838624338624e-06 * u + 0.0001736111111111111) * u + -0.005092592592592592) * u + 0.08969907407407406) * u + -1.057204861111111) * u + 8.790972222222219) * u + -52.93344907407407) * u + 232.7881944444444) * u + -742.8019965277775) * u + 1678.639467592592) * u + -2552.160127314814) * u + 2345.370949074074) * u + -985.7349324845676;
	break;
    case 6:
	output = (((((((((((3.582451499118166e-06 * u + -0.0002777777777777777) * u + 0.009803240740740741) * u + -0.2082175925925925) * u + 2.964670138888888) * u + -29.81902777777777) * u + 217.3365509259259) * u + -1157.171805555556) * u + 4469.548003472222) * u + -12220.9605324074) * u + 22467.11987268518) * u + -24948.38905092592) * u + 12661.14506751543;
	break;
    case 7:
	output = (((((((((((-3.582451499118166e-06 * u + 0.0003240740740740741) * u + -0.01336805555555556) * u + 0.332445987654321) * u + -5.55078125) * u + 65.55402777777778) * u + -561.5434027777778) * u + 3516.107916666666) * u + -15976.05078124999) * u + 51387.56902006171) * u + -111110.7921875) * u + 145059.862662037) * u + -86510.33509837961;
	break;
    case 8:
	output = (((((((((((2.686838624338624e-06 * u + -0.0002777777777777777) * u + 0.01311342592592592) * u + -0.3737268518518518) * u + 7.160329861111112) * u + -97.14819444444444) * u + 957.0106712962962) * u + -6896.834305555553) * u + 36088.6603298611) * u + -133731.4038194444) * u + 333174.7426273148) * u + -501173.642523148) * u + 344312.0016917437;
	break;
    case 9:
	output = (((((((((((-1.492688124632569e-06 * u + 0.0001736111111111111) * u + -0.009230324074074073) * u + 0.2965856481481481) * u + -6.413498263888888) * u + 98.31493055555556) * u + -1095.352141203704) * u + 8935.678819444443) * u + -52969.22599826389) * u + 222500.1414930556) * u + -628650.4297164353) * u + 1072722.094039352) * u + -836109.8007301311;
	break;
    case 10:
	output = (((((((((((5.970752498530275e-07 * u + -7.716049382716048e-05) * u + 0.004562114197530864) * u + -0.1631622942386831) * u + 3.930830439814814) * u + -67.19432870370369) * u + 835.5892168209874) * u + -7615.24710648148) * u + 50474.06103877315) * u + -237247.8008937757) * u + 750593.3974440584) * u + -1434993.955343364) * u + 1253653.573755465;
	break;
    case 11:
	output = (((((((((((-1.628387045053711e-07 * u + 2.314814814814814e-05) * u + -0.001506558641975308) * u + 0.05935570987654319) * u + -1.576490162037036) * u + 29.73451388888888) * u + -408.3309297839505) * u + 4113.142847222221) * u + -30158.61989293981) * u + 156956.4169945987) * u + -550280.5215875772) * u + 1166753.882719907) * u + -1131281.9444692;
	break;
    case 12:
	output = (((((((((((2.713978408422852e-08 * u + -4.208754208754209e-06) * u + 0.0002989969135802469) * u + -0.01286651234567901) * u + 0.3735098379629628) * u + -7.705486111111108) * u + 115.8290702160494) * u + -1278.217152777777) * u + 10276.58010706018) * u + -58697.98300540121) * u + 226075.3184124228) * u + -527113.4045528198) * u + 562585.3428035271;
	break;
    case 13:
	output = (((((((((((-2.087675698786809e-09 * u + 3.507295173961841e-07) * u + -2.700617283950617e-05) * u + 0.001260288065843621) * u + -0.03969907407407407) * u + 0.8892592592592592) * u + -14.52456790123457) * u + 174.2948148148148) * u + -1525.079629629629) * u + 9489.384362139919) * u + -39855.41432098765) * u + 101450.1455443322) * u + -118358.5031350543;
	break;
    default:
	output = 0;
    }
  } 
}
    ;




























#endif
